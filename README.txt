The main AutoDemo.py file is the file that runs on the users laptop.  This file imports various modules to allow for the functioning of the autonomous demolition.  These modules include deque, which is an array that can be modified from the left or the right and is used in this code to determine previous locations.  Opencv is used as well.  The correct version was necessary for the project to work on my own laptop and I believe that was v3 with python 3.6.

A webcam is attached to the laptop (preferrably as high definition as possible), then each frame is processed and filtered to allow the tracking of multiple objects.  When the code is run, a picture is taken and a prompt appears in the command window for number of demo areas and where on the displayed grid those demo areas are.  Once this information is obtained from the user, multiple windows appear to fascilitate the filtering process since the HSV values will be different in different light settings.  These settings on the trackbars can be written into the main AutoDemo.py file.  A list of goal destinations for each tractor is then sent serially to an Arduino Nano which will send the unique goals to each vehicle using the NRF24l01+ transciever. The pi library is included or can be found from the tutorial that is mentioned later.  The arduino library can be found here:
https://github.com/nRF24/RF24
These goal values were hardcoded for our purposes but can be changed to be more dynamic with a changing demo area.  It was assumed that there would only be 1 demo area at (3,3), so some of the code may need to be altered to allow for different demo areas.  There was a lot of trial and error to get some aspects of the code working, mainly with data types, with more time there would have been more optimization. Most of the workflow is commented in the main AutoDemo.py file.

On the vehicles themselves, each has a raspberry pi zero w, L293D motor drivers, a transciever, a battery to run the pi, and a 9v battery for the motors.  Each raspberry pi connects to the 40 pin socket on the motor controller board, and each pi connects to the board of its vehicle differently so consideration is needed when attaching them.  Pin two of each pi (5v) needs to be connected to the enable pin of the L293D motor IC.  The front loaders pi connects directly under the board with the body of the pi directly underneath the board.  The excavators pi connects to the top of the board with the body of the pi hanging off the side of the board.  The dump trucks pi is connected to the top of the board and the body of the pi hangs over the board. The documentation for the IC can be found here: http://www.ti.com/lit/ds/symlink/l293.pdf
From there, the orientation of the pi on each board can be deduced.  The The libraries and autoDemo.py files used are included in the folders for each vehicle here on github.  Each pi is running Raspbian Stretch. The tutorial to set up the transciever is given here: https://www.youtube.com/watch?v=_68f-yp63ds.
In order to work with the transciever on Raspbian stretch, some modifications were made to the lib_nrf24.py file.  In the "begin" function, a line needs to be added to the beginning of the function: self.spidev.max_speed_hz = 4000000.  This fixes an SPI issue the most recent distribution of stretch was having with the transciever.  The transciever turns its interrupt pin low when it receives a message, transmitts a message, or fails to transmit a message.  In the Arduino libraries there is a way to mask the interrupt pin to allow only one of those instances to trigger the interrupt pin, but we did not see any of that functionality in the raspberry pi libraries.

Each time the camera sees a vehicle in a new position, the vehicles new position is sent by the transceiver and current location is set in the ISR on the vehicle.  Again, much changed from the beginning of the project and the code on each tractor will need updated to be optimal.  Where it stands now is not where we would have liked it to be as a finished project.  That being said, it will function with a demo area of (3,3) with the dumptruck beginning in (5,0) facing (5,1) and the excavator starting in (0,1) facing (1,1).  The front loader was driven manually to trigger different phases of the demo when it arrived in certain grid locations.
